/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'Administrator' at '16-11-30 上午9:29' with Gradle 3.1
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.1/userguide/tutorial_java_projects.html
 */


// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'distribution'
mainClassName = "Main"

sourceCompatibility = 1.7
targetCompatibility = 1.7
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

configurations {
    quasar
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenLocal()

	maven { url "http://192.168.0.2:8081/nexus/content/repositories/snapshots" }
	maven { url "http://192.168.0.2:8081/nexus/content/groups/public/" }
	maven { url "http://192.168.0.2:8081/nexus/content/repositories/share" }
	maven { url "http://repo.maven.apache.org/maven2" }
	maven { url "http://repo.typesafe.com/typesafe/repo" }
	jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
	compile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    compile group: 'org.mockito', name: 'mockito-core', version:"2.2.22"
	
	compile "co.paralleluniverse:quasar-core:0.7.6"

    quasar  "co.paralleluniverse:quasar-core:0.7.6"
}


run {
    jvmArgs "-javaagent:${configurations.quasar.iterator().next()}"
    systemProperty "co.paralleluniverse.fibers.verifyInstrumentation", "true"
}

ant.taskdef(name:'scanSuspendables', classname:'co.paralleluniverse.fibers.instrument.SuspendablesScanner',
        classpath: "build/classes/main:build/resources/main:${configurations.runtime.asPath}")

task scanSuspendables << {
    ant.scanSuspendables(
            auto: true,
            suspendablesFile: "$sourceSets.main.output.resourcesDir/META-INF/suspendables",
            supersFile: "$sourceSets.main.output.resourcesDir/META-INF/suspendable-supers",
            append: true) {
        fileset(dir: sourceSets.main.output.classesDir)
    }
}

tasks.jar.dependsOn(scanSuspendables)
tasks.run.dependsOn(scanSuspendables)